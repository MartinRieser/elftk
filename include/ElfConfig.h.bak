/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * @file ElfConfig.h
 * @brief Configuration structure for ELF analysis
 */

#pragma once

#include <string>

/**
 * @brief Performance optimization constants for ELF processing
 *
 * These constants define thresholds and multipliers used for performance optimizations
 * when processing large ELF files, particularly embedded firmware binaries.
 */
namespace ElfOptimization {
    /** @brief Memory mapping threshold - files larger than this use mmap instead of loading into RAM */
    constexpr size_t DEFAULT_MMAP_THRESHOLD = 10 * 1024 * 1024;  // 10MB
}

/**
 * @brief Configuration options for ELF analysis
 *
 * This structure contains all configuration options that control how
 * the ELF analysis is performed. Users can customize the analysis
 * behavior by providing a Config instance to the ElfReader constructor.
 *
 * @example
 * ```cpp
 * Config config;
 * config.verbosity = 1;           // Enable verbose output
 * config.functionsOnly = true;    // Analyze only functions
 *
 * ElfReader reader("firmware.elf", config);
 * auto functions = reader.getFunctions();
 * ```
 */
struct Config {
    std::string inputFile;
    std::string format = "csv";
    bool functionsOnly = false;
    bool variablesOnly = false;
    int verbosity = 0;
    bool showSections = false;                     ///< Show section names in output for all symbols
    size_t mmapThreshold = ElfOptimization::DEFAULT_MMAP_THRESHOLD;  ///< Memory mapping threshold for large files

    // Binary Export Options
    std::string exportFormat;                  ///< Export format ("hex", "s19", "s28", "s37", "bin")
    bool constantsOnly = false;                ///< Show only constants

    // Local Variable Analysis Options
    bool showLocalVariables = false;       ///< Enable local variable analysis and display
    bool showStackLayout = false;          ///< Show function stack frame layout

    // Memory Layout Options
    bool extractInterruptVectors = false;  ///< Extract and display interrupt vector table
    bool extractMemoryRegions = false;     ///< Extract and display memory region mapping

    // Phase 2A.2: External Validation Framework Options (keep for future use)
    std::string validateTool;              ///< External validation tool ("gdb", "objdump", "readelf", "all")
    std::string validationOutput;          ///< Output file for validation report
};