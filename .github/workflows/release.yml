name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libdwarf-dev libelf-dev pkg-config

    - name: Check Docker
      run: |
        docker --version
        docker info

    - name: Verify Dockerfile exists
      run: |
        ls -la .docker/Dockerfile.deb

    - name: Build deb package
      run: |
        docker build -f .docker/Dockerfile.deb -t elftk-deb-builder .
        docker run --name temp-deb-builder elftk-deb-builder
        mkdir -p build/dist
        docker cp temp-deb-builder:/output/elftk_1.0.0_amd64.deb ./build/dist/
        docker rm temp-deb-builder
        # Rename with version support
        VERSION="${{ steps.get_version.outputs.version }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          mv ./build/dist/elftk_1.0.0_amd64.deb ./elftk-linux.deb
        else
          mv ./build/dist/elftk_1.0.0_amd64.deb ./elftk-linux-${VERSION}.deb
        fi

    - name: Test Linux build
      run: |
        # Extract and test the deb package
        sudo dpkg -i elftk-linux*.deb
        elftk --help
        echo "✅ Linux build test passed"

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: elftk-linux*.deb

  build-windows:
    runs-on: windows-latest
    needs: build-linux
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get_version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          base-devel
          mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-ucrt-x86_64-libdwarf
          mingw-w64-ucrt-x86_64-libelf
          git
          zip

    - name: Build Windows executable
      shell: msys2 {0}
      run: |
        # Verify environment
        echo "MSYSTEM: $MSYSTEM"
        which g++
        g++ --version

        # Build the project
        make clean
        make windows

        # Create proper Windows distribution
        mkdir -p dist-windows
        cp build/bin/* dist-windows/
        cp README.md LICENSE dist-windows/

    - name: Create Windows zip
      shell: msys2 {0}
      run: |
        cd dist-windows
        VERSION="${{ steps.get_version.outputs.version }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          zip -r ../elftk-win.zip .
        else
          zip -r ../elftk-win-${VERSION}.zip .
        fi

    - name: Test Windows build
      shell: msys2 {0}
      run: |
        # Test the built executable
        cd dist-windows
        ./elftk.exe --version
        ./elftk.exe --help
        echo "✅ Windows build test passed"

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-zip
        path: elftk-win*.zip

  build-macos:
    runs-on: macos-latest
    needs: build-windows
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      run: |
        brew install libdwarf libelf pkg-config

    - name: Build macOS executable
      run: |
        make clean
        make macos
        # Create proper macOS distribution
        mkdir -p dist-macos
        cp build/bin/* dist-macos/
        cp README.md LICENSE dist-macos/

    - name: Create macOS zip
      run: |
        cd dist-macos
        VERSION="${{ steps.get_version.outputs.version }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          zip -r ../elftk-mac.zip .
        else
          zip -r ../elftk-mac-${VERSION}.zip .
        fi

    - name: Test macOS build
      run: |
        # Test the built executable
        cd dist-macos
        ./elftk --version
        ./elftk --help
        echo "✅ macOS build test passed"

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-zip
        path: elftk-mac*.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-linux.outputs.version }}
        name: Release ${{ needs.build-linux.outputs.version }}
        draft: false
        prerelease: false
        files: |
          linux-deb/elftk-linux*.deb
          windows-zip/elftk-win*.zip
          macos-zip/elftk-mac*.zip
        body: |
          ## ELF Toolkit Release ${{ needs.build-linux.outputs.version }}

          ### Downloads

          - **Linux (Ubuntu/Debian)**: `elftk-linux*.deb`
            - Install with: `sudo dpkg -i elftk-linux*.deb`

          - **Windows**: `elftk-win*.zip`
            - Extract and run `elftk.exe` directly

          - **macOS**: `elftk-mac*.zip`
            - Extract and run from terminal

          ### Changes

          - Cross-platform ELF analysis toolkit
          - Support for DWARF debugging information
          - Command-line interface for ELF file inspection
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}